--- a/net/minecraft/network/datasync/EntityDataManager.java
+++ b/net/minecraft/network/datasync/EntityDataManager.java
@@ -2,6 +_,7 @@
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
+import com.mohistmc.util.i18n.i18n;
 import io.netty.handler.codec.DecoderException;
 import io.netty.handler.codec.EncoderException;
 import java.io.IOException;
@@ -15,12 +_,15 @@
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.crash.ReportedException;
 import net.minecraft.entity.Entity;
+import net.minecraft.entity.LivingEntity;
+import net.minecraft.entity.player.ServerPlayerEntity;
 import net.minecraft.network.PacketBuffer;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
 import org.apache.commons.lang3.ObjectUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.craftbukkit.v1_16_R3.entity.CraftPlayer;
 
 public class EntityDataManager {
    private static final Logger field_190303_a = LogManager.getLogger();
@@ -36,11 +_,13 @@
    }
 
    public static <T> DataParameter<T> func_187226_a(Class<? extends Entity> p_187226_0_, IDataSerializer<T> p_187226_1_) {
-      if (field_190303_a.isDebugEnabled()) {
+      if (true || field_190303_a.isDebugEnabled()) { // Forge: This is very useful for mods that register keys on classes that are not their own
          try {
             Class<?> oclass = Class.forName(Thread.currentThread().getStackTrace()[2].getClassName());
             if (!oclass.equals(p_187226_0_)) {
-               field_190303_a.debug("defineId called for: {} from {}", p_187226_0_, oclass, new RuntimeException());
+               // Forge: log at warn, mods should not add to classes that they don't own, and only add stacktrace when in debug is enabled as it is mostly not needed and consumes time
+               if (field_190303_a.isDebugEnabled()) field_190303_a.warn(i18n.get("entitydatamanager.1", p_187226_0_, oclass), new RuntimeException());
+               else field_190303_a.warn(i18n.get("entitydatamanager.2", p_187226_0_, oclass));
             }
          } catch (ClassNotFoundException classnotfoundexception) {
          }
@@ -123,8 +_,18 @@
          dataentry.func_187208_a(true);
          this.field_187237_f = true;
       }
+      if (p_187227_1_ == LivingEntity.field_184632_c && field_187233_b instanceof ServerPlayerEntity && ((ServerPlayerEntity) field_187233_b).initialized()){
+         CraftPlayer player = ((ServerPlayerEntity) this.field_187233_b).getBukkitEntity();
+         player.setRealHealth(((Float) p_187227_2_));
+      }
+   }
 
+   // CraftBukkit start - add method from above
+   public <T> void markDirty(DataParameter<T> datawatcherobject) {
+      this.func_187219_c(datawatcherobject).func_187208_a(true);
+      this.field_187237_f = true;
    }
+   // CraftBukkit end
 
    public boolean func_187223_a() {
       return this.field_187237_f;
