--- a/net/minecraft/util/WeightedList.java
+++ b/net/minecraft/util/WeightedList.java
@@ -14,12 +_,21 @@
 public class WeightedList<U> {
    protected final List<WeightedList.Entry<U>> field_220658_a;
    private final Random field_220659_b = new Random();
+   private final boolean isUnsafe; // Paper
 
+   // Paper start - add useClone option
    public WeightedList() {
-      this(Lists.newArrayList());
-   }
-
-   private WeightedList(List<WeightedList.Entry<U>> p_i231541_1_) {
+      this(true);
+   }
+
+   public WeightedList(boolean isUnsafe) {
+      this(Lists.newArrayList(), isUnsafe);
+   }
+
+   private WeightedList(List<WeightedList.Entry<U>> p_i231541_1_) { this(p_i231541_1_, true); }
+   private WeightedList(List<WeightedList.Entry<U>> p_i231541_1_, boolean isUnsafe) {
+      this.isUnsafe = isUnsafe;
+      // Paper end
       this.field_220658_a = Lists.newArrayList(p_i231541_1_);
    }
 
@@ -39,13 +_,16 @@
    }
 
    public WeightedList<U> func_226314_a_(Random p_226314_1_) {
+      // Paper start - make concurrent safe, work off a clone of the list
+      List<WeightedList.Entry<U>> list = isUnsafe ? new java.util.ArrayList<WeightedList.Entry<U>>(this.field_220658_a) : this.field_220658_a;
       this.field_220658_a.forEach((p_234004_1_) -> {
          p_234004_1_.func_220648_a(p_226314_1_.nextFloat());
       });
       this.field_220658_a.sort(Comparator.comparingDouble((p_234003_0_) -> {
          return p_234003_0_.func_220649_a();
       }));
-      return this;
+      return isUnsafe ? new WeightedList<>(list, isUnsafe) : this;
+      // Paper end
    }
 
    public boolean func_234005_b_() {
