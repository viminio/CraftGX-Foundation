--- a/net/minecraft/util/math/shapes/IndirectMerger.java
+++ b/net/minecraft/util/math/shapes/IndirectMerger.java
@@ -5,10 +_,16 @@
 import it.unimi.dsi.fastutil.ints.IntArrayList;
 
 public final class IndirectMerger implements IDoubleListMerger {
-   private final DoubleArrayList field_197856_a;
+   private final DoubleList field_197856_a; // Paper - Optimize Voxel Shape Merging
    private final IntArrayList field_197857_b;
    private final IntArrayList field_197858_c;
 
+   // Paper start - Optimize Voxel Shape Merging
+   private static final IntArrayList INFINITE_B_1 = new IntArrayList(new int[]{1, 1});
+   private static final IntArrayList INFINITE_B_0 = new IntArrayList(new int[]{0, 0});
+   private static final IntArrayList INFINITE_C = new IntArrayList(new int[]{0, 1});
+   // Paper end
+
    protected IndirectMerger(DoubleList p_i47685_1_, DoubleList p_i47685_2_, boolean p_i47685_3_, boolean p_i47685_4_) {
       int i = 0;
       int j = 0;
@@ -16,6 +_,23 @@
       int k = p_i47685_1_.size();
       int l = p_i47685_2_.size();
       int i1 = k + l;
+
+      // Paper start - Optimize Voxel Shape Merging
+      int size = p_i47685_1_.size();
+      double tail = p_i47685_1_.getDouble(size - 1);
+      double head = p_i47685_1_.getDouble(0);
+      if (head == Double.NEGATIVE_INFINITY && tail == Double.POSITIVE_INFINITY && !p_i47685_3_ && !p_i47685_4_ && (size == 2 || size == 4)) {
+          this.field_197856_a = p_i47685_2_;
+          if (size == 2) {
+              this.field_197857_b = INFINITE_B_0;
+          } else {
+              this.field_197857_b = INFINITE_B_1;
+          }
+          this.field_197858_c = INFINITE_C;
+          return;
+      }
+      // Paper end
+
       this.field_197856_a = new DoubleArrayList(i1);
       this.field_197857_b = new IntArrayList(i1);
       this.field_197858_c = new IntArrayList(i1);
