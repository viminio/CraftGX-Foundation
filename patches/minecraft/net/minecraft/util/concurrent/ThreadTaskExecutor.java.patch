--- a/net/minecraft/util/concurrent/ThreadTaskExecutor.java
+++ b/net/minecraft/util/concurrent/ThreadTaskExecutor.java
@@ -1,12 +_,15 @@
 package net.minecraft.util.concurrent;
 
 import com.google.common.collect.Queues;
+
+import com.mohistmc.util.i18n.i18n;
 import java.util.Queue;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
 import java.util.concurrent.locks.LockSupport;
 import java.util.function.BooleanSupplier;
 import java.util.function.Supplier;
+
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
 import org.apache.logging.log4j.LogManager;
@@ -74,6 +_,20 @@
 
    }
 
+    // Paper start
+    public void scheduleOnMain(Runnable r0) {
+        // postToMainThread does not work the same as older versions of mc
+        // This method is actually used to create a TickTask, which can then be posted onto main
+        this.addTask(this.func_212875_d_(r0));
+    }
+    // Paper end
+
+    // Paper start - OBFHELPER
+    public final void addTask(R r0) {
+        func_212871_a_(r0);
+    }
+    // Paper end
+
    public void func_212871_a_(R p_212871_1_) {
       this.field_213173_d.add(p_212871_1_);
       LockSupport.unpark(this.func_213170_ax());
@@ -93,50 +_,51 @@
       this.field_213173_d.clear();
    }
 
-   protected void func_213160_bf() {
-      while(this.func_213168_p()) {
-      }
-
-   }
-
-   protected boolean func_213168_p() {
-      R r = this.field_213173_d.peek();
-      if (r == null) {
-         return false;
-      } else if (this.field_213174_e == 0 && !this.func_212874_c_(r)) {
-         return false;
-      } else {
-         this.func_213166_h(this.field_213173_d.remove());
-         return true;
-      }
-   }
-
-   public void func_213161_c(BooleanSupplier p_213161_1_) {
-      ++this.field_213174_e;
-
-      try {
-         while(!p_213161_1_.getAsBoolean()) {
-            if (!this.func_213168_p()) {
-               this.func_223705_bi();
+    public void func_213160_bf() {  // Paper - protected -> public
+        while (this.func_213168_p()) {
+        }
+
+    }
+
+    protected boolean func_213168_p() {
+        R r = this.field_213173_d.peek();
+        if (r == null) {
+            return false;
+        } else if (this.field_213174_e == 0 && !this.func_212874_c_(r)) {
+            return false;
+        } else {
+            this.func_213166_h(this.field_213173_d.remove());
+            return true;
+        }
+    }
+
+    public void func_213161_c(BooleanSupplier p_213161_1_) {
+        ++this.field_213174_e;
+
+        try {
+            while (!p_213161_1_.getAsBoolean()) {
+                if (!this.func_213168_p()) {
+                    this.func_223705_bi();
+                }
             }
-         }
-      } finally {
-         --this.field_213174_e;
-      }
-
-   }
-
-   protected void func_223705_bi() {
-      Thread.yield();
-      LockSupport.parkNanos("waiting for tasks", 100000L);
-   }
-
-   protected void func_213166_h(R p_213166_1_) {
-      try {
-         p_213166_1_.run();
-      } catch (Exception exception) {
-         field_213172_c.fatal("Error executing task on {}", this.func_213142_bd(), exception);
-      }
-
-   }
+        } finally {
+            --this.field_213174_e;
+        }
+
+    }
+
+    protected void func_223705_bi() {
+        Thread.yield();
+        LockSupport.parkNanos("waiting for tasks", 100000L);
+    }
+
+    protected void func_213166_h(R p_213166_1_) {
+        try {
+            p_213166_1_.run();
+        } catch (Exception exception) {
+            field_213172_c.fatal(i18n.get("threadtaskexecutor.1", this.func_213142_bd()));
+            exception.printStackTrace();
+        }
+
+    }
 }
