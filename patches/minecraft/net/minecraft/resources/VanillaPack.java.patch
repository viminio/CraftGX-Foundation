--- a/net/minecraft/resources/VanillaPack.java
+++ b/net/minecraft/resources/VanillaPack.java
@@ -3,6 +_,7 @@
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
+import com.mohistmc.util.i18n.i18n;
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
@@ -53,7 +_,7 @@
                   p_217809_0_.put(resourcepacktype, filesystem);
                }
             } catch (IOException | URISyntaxException urisyntaxexception) {
-               field_195784_b.error("Couldn't get a list of all vanilla resources", (Throwable)urisyntaxexception);
+               field_195784_b.error(i18n.get("vanillapack.1", (Throwable)urisyntaxexception));
             }
          }
 
@@ -120,7 +_,7 @@
       try {
          URL url1 = VanillaPack.class.getResource("/" + p_225637_1_.func_198956_a() + "/.mcassetsroot");
          if (url1 == null) {
-            field_195784_b.error("Couldn't find .mcassetsroot, cannot load vanilla resources");
+            field_195784_b.error(i18n.get("vanillapack.2"));
             return set;
          }
 
@@ -133,11 +_,11 @@
             Path path1 = field_217810_e.get(p_225637_1_).getPath("/" + p_225637_1_.func_198956_a());
             func_229867_a_(set, p_225637_4_, "minecraft", path1, p_225637_3_, p_225637_5_);
          } else {
-            field_195784_b.error("Unsupported scheme {} trying to list vanilla resources (NYI?)", (Object)uri1);
+            field_195784_b.error(i18n.get("vanillapack.3", (Object)uri1));
          }
       } catch (NoSuchFileException | FileNotFoundException filenotfoundexception) {
       } catch (IOException | URISyntaxException urisyntaxexception) {
-         field_195784_b.error("Couldn't get a list of all vanilla resources", (Throwable)urisyntaxexception);
+         field_195784_b.error(i18n.get("vanillapack.4", (Throwable)urisyntaxexception));
       }
 
       return set;
@@ -171,7 +_,7 @@
 
       try {
          URL url = VanillaPack.class.getResource(s);
-         return func_223459_a(s, url) ? url.openStream() : null;
+         return func_223459_a(s, url) ? getExtraInputStream(p_195782_1_, s) : null;
       } catch (IOException ioexception) {
          return VanillaPack.class.getResourceAsStream(s);
       }
@@ -187,7 +_,7 @@
 
    @Nullable
    protected InputStream func_200010_a(String p_200010_1_) {
-      return VanillaPack.class.getResourceAsStream("/" + p_200010_1_);
+      return getExtraInputStream(ResourcePackType.SERVER_DATA, "/" + p_200010_1_);
    }
 
    public boolean func_195764_b(ResourcePackType p_195764_1_, ResourceLocation p_195764_2_) {
@@ -225,5 +_,19 @@
    }
 
    public void close() {
+   }
+
+   //Vanilla used to just grab from the classpath, this breaks dev environments, and Forge runtime
+   //as forge ships vanilla assets in an 'extra' jar with no classes.
+   //So find that extra jar using the .mcassetsroot marker.
+   private InputStream getExtraInputStream(ResourcePackType type, String resource) {
+      try {
+         FileSystem fs = field_217810_e.get(type);
+         if (fs != null)
+            return Files.newInputStream(fs.getPath(resource));
+         return VanillaPack.class.getResourceAsStream(resource);
+      } catch (IOException e) {
+         return VanillaPack.class.getResourceAsStream(resource);
+      }
    }
 }
