--- a/net/minecraft/data/LootTableProvider.java
+++ b/net/minecraft/data/LootTableProvider.java
@@ -6,6 +_,7 @@
 import com.google.common.collect.Sets;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
+import com.mohistmc.util.i18n.i18n;
 import com.mojang.datafixers.util.Pair;
 import java.io.IOException;
 import java.nio.file.Path;
@@ -43,7 +_,7 @@
    public void func_200398_a(DirectoryCache p_200398_1_) {
       Path path = this.field_218443_d.func_200391_b();
       Map<ResourceLocation, LootTable> map = Maps.newHashMap();
-      this.field_218444_e.forEach((p_218438_1_) -> {
+      this.getTables().forEach((p_218438_1_) -> {
          p_218438_1_.getFirst().get().accept((p_218437_2_, p_218437_3_) -> {
             if (map.put(p_218437_2_, p_218437_3_.func_216039_a(p_218438_1_.getSecond()).func_216038_b()) != null) {
                throw new IllegalStateException("Duplicate loot table " + p_218437_2_);
@@ -54,13 +_,8 @@
          return null;
       }, map::get);
 
-      for(ResourceLocation resourcelocation : Sets.difference(LootTables.func_215796_a(), map.keySet())) {
-         validationtracker.func_227530_a_("Missing built-in table: " + resourcelocation);
-      }
+      validate(map, validationtracker);
 
-      map.forEach((p_229439_1_, p_229439_2_) -> {
-         LootTableManager.func_227508_a_(validationtracker, p_229439_1_, p_229439_2_);
-      });
       Multimap<String, String> multimap = validationtracker.func_227527_a_();
       if (!multimap.isEmpty()) {
          multimap.forEach((p_229440_0_, p_229440_1_) -> {
@@ -74,11 +_,25 @@
             try {
                IDataProvider.func_218426_a(field_218442_c, p_200398_1_, LootTableManager.func_215301_a(p_229441_3_), path1);
             } catch (IOException ioexception) {
-               field_218441_b.error("Couldn't save loot table {}", path1, ioexception);
+               field_218441_b.error(i18n.get("loottableprovider.1", path1, ioexception));
             }
 
          });
       }
+   }
+
+   protected List<Pair<Supplier<Consumer<BiConsumer<ResourceLocation, LootTable.Builder>>>, LootParameterSet>> getTables() {
+      return field_218444_e;
+   }
+
+   protected void validate(Map<ResourceLocation, LootTable> map, ValidationTracker validationtracker) {
+      for(ResourceLocation resourcelocation : Sets.difference(LootTables.func_215796_a(), map.keySet())) {
+         validationtracker.func_227530_a_("Missing built-in table: " + resourcelocation);
+      }
+
+      map.forEach((p_218436_2_, p_218436_3_) -> {
+         LootTableManager.func_227508_a_(validationtracker, p_218436_2_, p_218436_3_);
+      });
    }
 
    private static Path func_218439_a(Path p_218439_0_, ResourceLocation p_218439_1_) {
